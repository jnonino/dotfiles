##################
# Helper functions
##################

# Function to add or replace a block with markers
# Usage: upsert_block "$initial_content" "$block_content" "$marker"
upsert_block() {
    local initial_content="$1"
    local block="$2"
    local marker="$3"

    local start_marker="# BEGIN $marker"
    local end_marker="# END $marker"

    if echo "$initial_content" | grep -F -q "$start_marker"; then
        # Replace existing block - use literal string matching instead of regex
        echo "$initial_content" | awk -v start="$start_marker" -v end="$end_marker" -v new="$block" '
            BEGIN { in_block = 0 }
            index($0, start) == 1 {
                print $0
                print new
                in_block = 1
                next
            }
            index($0, end) == 1 && in_block {
                print $0
                in_block = 0
                next
            }
            !in_block { print $0 }
        '
    else
        # Add new block to existing content
        echo "$initial_content"
        echo ""
        echo "$start_marker"
        echo "$block"
        echo "$end_marker"
    fi
}

#########################################################
# Preserve original content if the file was already there
# Might be empty if file is being created
#########################################################
original_content=$(cat)

#####################
# Add settings blocks
#####################

# Start with the original content
current_content="$original_content"

###
# Homebrew
homebrew_block='eval "$($(brew --prefix)/bin/brew shellenv)"'
current_content=$(upsert_block "$current_content" "$homebrew_block" "Homebrew")

###
# Pyenv
pyenv_block='eval "$(pyenv init -)"'
current_content=$(upsert_block "$current_content" "$pyenv_block" "Pyenv")

###
# Goenv
goenv_block='eval "$(goenv init -)"
PATH=$PATH:$(go env GOPATH)/bin
PATH="$PATH:$(go env GOPATH)/bin:$(goenv prefix)/bin"'
current_content=$(upsert_block "$current_content" "$goenv_block" "Goenv")

###
# Nvm
nvm_block='# This loads nvm
[ -s "$(brew --prefix)/opt/nvm/nvm.sh" ] && \\. "$(brew --prefix)/opt/nvm/nvm.sh"
# This loads nvm bash_completion
[ -s "$(brew --prefix)/opt/nvm/etc/bash_completion.d/nvm" ] && \\. "$(brew --prefix)/opt/nvm/etc/bash_completion.d/nvm"'
current_content=$(upsert_block "$current_content" "$nvm_block" "Nvm")

###
# Tfswitch
tfswitch_block='load-tfswitch() {
  local tfswitchrc_path=".terraform-version"

  if [ -f "$tfswitchrc_path" ]; then
    tfswitch
  fi
}
add-zsh-hook chpwd load-tfswitch
load-tfswitch'
current_content=$(upsert_block "$current_content" "$tfswitch_block" "TerraformSwitch")

###
# Tgswitch
tgswitch_block='load-tgswitch() {
  local tgswitchrc_path=".terragrunt-version"

  if [ -f "$tgswitchrc_path" ]; then
    tgswitch
  fi
}
add-zsh-hook chpwd load-tgswitch
load-tgswitch'
current_content=$(upsert_block "$current_content" "$tgswitch_block" "TerragruntSwitch")

###
# Tgswitch
tofuswitch_block='load-tofuswitch() {
  local tfswitchrc_path=".opentofu-version"

  if [ -f "$tfswitchrc_path" ]; then
    TF_PRODUCT=opentofu tfswitch
  fi
}
add-zsh-hook chpwd load-tofuswitch
load-tofuswitch'
current_content=$(upsert_block "$current_content" "$tofuswitch_block" "TofuSwitch")

###
# CustomFunctions
custom_functions_block='source "{{ joinPath .chezmoi.homeDir ".config/functions.sh" }}"'
current_content=$(upsert_block "$current_content" "$custom_functions_block" "CustomFunctions")

######################
# File specific blocks
######################
{{- $targetFile := .chezmoi.targetFile | base }}

{{- if eq $targetFile ".bashrc" }}

# Bash  specific config
bash_block='echo "Hola"'
current_content=$(upsert_block "$current_content" "$bash_block" "BashConfig")

# Direnv
direnv_block='eval "$(direnv hook bash)"'
current_content=$(upsert_block "$current_content" "$direnv_block" "Direnv")

# Rbenv
rbenv_block_bash='eval "$(rbenv init - bash)"'
current_content=$(upsert_block "$current_content" "$rbenv_block" "Rbenv")

{{- else if eq $targetFile ".zshrc" }}
# Zsh specific config
zsh_block='autoload -U add-zsh-hook

HISTFILE="/home/jnonino/.zsh_history"
HISTSIZE=100000  # How many lines of history to keep in memory
SAVEHIST=5000000 # Number of history entries to save to disk
HISTDUP=erase    # Erase duplicates in the history file
setopt extended_history       # Record timestamp of command in HISTFILE
setopt appendhistory          # Append history to the history file (no overwriting)
setopt hist_expire_dups_first # Delete duplicates first when HISTFILE size exceeds HISTSIZE
setopt sharehistory           # Share history across terminals
setopt incappendhistory       # Immediately append to the history file, not just when a term is killed
setopt hist_ignore_dups       # Ignore duplicated commands history list
setopt hist_ignore_space      # Ignore commands that start with space
setopt hist_verify            # Show command with history expansion to user before running it
setopt inc_append_history     # Add commands to HISTFILE in order of execution
setopt share_history          # Share command history data

source $(brew --prefix)/share/zsh-history-substring-search/zsh-history-substring-search.zsh
source $(brew --prefix)/share/zsh-autosuggestions/zsh-autosuggestions.zsh
source $(brew --prefix)/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh'
current_content=$(upsert_block "$current_content" "$zsh_block" "ZshConfig")

# Direnv
direnv_block='eval "$(direnv hook zsh)"'
current_content=$(upsert_block "$current_content" "$direnv_block" "Direnv")

# Rbenv
rbenv_block='eval "$(rbenv init - zsh)"'
current_content=$(upsert_block "$current_content" "$rbenv_block" "Rbenv")

{{- end }}

#########################
# Output the final result
#########################
echo "$current_content"
