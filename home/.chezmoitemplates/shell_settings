##################
# Helper functions
##################

# Function to add or replace a block with markers
# Usage: upsert_block "$initial_content" "$block_content" "$marker"
upsert_block() {
    local initial="$1"
    local block="$2"
    local marker="$3"
    local start="# BEGIN $marker"
    local end="# END $marker"

    # Create temp file with error handling
    local tmp
    tmp=$(mktemp) || { echo "Failed to create temp file" >&2; return 1; }

    # Ensure cleanup on function exit
    trap 'rm -f "$tmp"' EXIT

    # Write new block to temp file
    printf '%s\n' "$block" > "$tmp"

    if echo "$initial" | grep -F -q "$start"; then
        # Replace existing block
        awk -v start="$start" -v end="$end" -v newfile="$tmp" '
            BEGIN { in_block = 0 }
            index($0, start) == 1 {
                print; system("cat \"" newfile "\""); in_block = 1; next
            }
            index($0, end) == 1 && in_block {
                print; in_block = 0; next
            }
            !in_block { print }
        ' <<< "$initial"
    else
        # Add new block to existing content
        printf '%s\n\n%s\n' "$initial" "$start"
        cat "$tmp"
        printf '%s\n' "$end"
    fi

    # Cleanup (trap will also handle this)
    rm -f "$tmp"
}

######################
# Variable definitions
######################
{{- $targetFile := .chezmoi.targetFile | base }}

#########################################################
# Preserve original content if the file was already there
# Might be empty if file is being created
#########################################################
original_content=$(cat)

#####################
# Add settings blocks
#####################

# User's bin path
users_bin_path_block='PATH="$PATH:$HOME/bin"'

###
# Homebrew
homebrew_block='eval "$($(brew --prefix)/bin/brew shellenv)"'

###
# Direnv
direnv_block_bash='eval "$(direnv hook bash)"'
direnv_block_zsh='eval "$(direnv hook zsh)"'

###
# Pyenv
pyenv_block='eval "$(pyenv init -)"'

###
# Goenv
# goenv_block='eval "$(goenv init -)"
# PATH=$PATH:$(go env GOPATH)/bin
# PATH="$PATH:$(go env GOPATH)/bin:$(goenv prefix)/bin"'
goenv_block='eval "$(goenv init -)"'

###
# Nvm
nvm_block='export NVM_DIR="$HOME/.nvm"
[ -s "$(brew --prefix)/opt/nvm/nvm.sh" ] && \. "$(brew --prefix)/opt/nvm/nvm.sh"
[ -s "$(brew --prefix)/opt/nvm/etc/bash_completion.d/nvm" ] && \. "$(brew --prefix)/opt/nvm/etc/bash_completion.d/nvm"'

###
# Rbenv
rbenv_block_bash='eval "$(rbenv init - bash)"'
rbenv_block_zsh='eval "$(rbenv init - zsh)"'

###
# Tfswitch
tfswitch_block_zsh='load-tfswitch() {
  local tfswitchrc_path=".terraform-version"

  if [ -f "$tfswitchrc_path" ]; then
    tfswitch
  fi
}
add-zsh-hook chpwd load-tfswitch
load-tfswitch'

###
# Tgswitch
tgswitch_block_zsh='load-tgswitch() {
  local tgswitchrc_path=".terragrunt-version"

  if [ -f "$tgswitchrc_path" ]; then
    tgswitch
  fi
}
add-zsh-hook chpwd load-tgswitch
load-tgswitch'

###
# Tofuswitch
tofuswitch_block_zsh='load-tofuswitch() {
  local tfswitchrc_path=".opentofu-version"

  if [ -f "$tfswitchrc_path" ]; then
    TF_PRODUCT=opentofu tfswitch
  fi
}
add-zsh-hook chpwd load-tofuswitch
load-tofuswitch'

###
# CustomFunctions
custom_functions_block='source "{{ joinPath .chezmoi.homeDir ".config/functions.sh" }}"'
current_content=$(upsert_block "$current_content" "$custom_functions_block" "CustomFunctions")

###
# Bash configuration
bash_block=''

###
# Zsh configuration
zsh_block='autoload -U add-zsh-hook

HISTFILE="{{ .chezmoi.homeDir }}/.zsh_history"
HISTSIZE=100000  # How many lines of history to keep in memory
SAVEHIST=5000000 # Number of history entries to save to disk
HISTDUP=erase    # Erase duplicates in the history file
setopt extended_history       # Record timestamp of command in HISTFILE
setopt appendhistory          # Append history to the history file (no overwriting)
setopt hist_expire_dups_first # Delete duplicates first when HISTFILE size exceeds HISTSIZE
setopt sharehistory           # Share history across terminals
setopt incappendhistory       # Immediately append to the history file, not just when a term is killed
setopt hist_ignore_dups       # Ignore duplicated commands history list
setopt hist_ignore_space      # Ignore commands that start with space
setopt hist_verify            # Show command with history expansion to user before running it
setopt inc_append_history     # Add commands to HISTFILE in order of execution
setopt share_history          # Share command history data

source $(brew --prefix)/share/zsh-history-substring-search/zsh-history-substring-search.zsh
source $(brew --prefix)/share/zsh-autosuggestions/zsh-autosuggestions.zsh
source $(brew --prefix)/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh'

###
# oh-my-posh
oh_my_posh_block_zsh='if [ "$TERM_PROGRAM" != "Apple_Terminal" ]; then
  eval "$(oh-my-posh init zsh)"
fi'

oh_my_posh_block_bash='eval "$(oh-my-posh init bash)"'
